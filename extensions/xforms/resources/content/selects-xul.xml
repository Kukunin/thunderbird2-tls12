<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Mozilla XForms support.
   -
   - The Initial Developer of the Original Code is
   - Mozilla Foundation.
   - Portions created by the Initial Developer are Copyright (C) 2006
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -  Alexander Surkov <surkov.alexander@gmail.com> (original author)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings id="xformsSelectsXULBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <!-- SELECT: APPEARANCE FULL -->
  <binding id="select-full"
           extends="chrome://xforms/content/selects.xml#select-base">
    <content>
      <children includes="label"/>
      <xul:vbox class="xf-value">
        <children/>
      </xul:vbox>
    </content>
  </binding>


  <!-- RADIOGROUP used as representation of SELECT1 element.
    XUL radiogroup element searches radio elements in explicit content. This
    binding redefines '_getRadioChildren' method to return correct list of
    radio elements that are used for representation of xforms item elements.
  -->
  <binding id="select1-full-radiogroup"
           extends="chrome://global/content/bindings/radio.xml#radiogroup">

    <implementation>
      <method name="_getRadioChildren">
        <body>
          var select = this.ownerDocument.getBindingParent(this);

          if (this.mRadioChildren)
            return this.mRadioChildren;

          var radioChildren = [];
          function buildRadioChildren(aItem, aArray) {
            aArray.push(aItem.control);
            return true;
          }
          select.traverseItems(select, buildRadioChildren, radioChildren);
          return this.mRadioChildren = radioChildren;
        </body>
      </method>
    </implementation>
  </binding>

  <!-- SELECT1: APPEARANCE FULL -->
  <binding id="select1-full"
           extends="chrome://xforms/content/selects.xml#select1-base">
    <content>
      <children includes="label"/>
      <xul:radiogroup flex="1" class="xf-value" anonid="control"
                      xbl:inherits="tabindex">
        <children/>
      </xul:radiogroup>
    </content>

    <implementation>
      <method name="getControlElement">
        <body>
          return this.ownerDocument.
            getAnonymousElementByAttribute(this, "anonid", "control");
        </body>
      </method>
    </implementation>
  </binding>


  <!-- ITEM of SELECT/SELECT1 APPEARANCE FULL -->
  <binding id="select-full-item-base"
           extends="chrome://xforms/content/selects.xml#select-item-base">

    <implementation>
      <property name="disabled">
        <getter>
          return this.control.disabled;
        </getter>
        <setter>
          this.control.disabled = val;
          if (val)
            this.setAttribute('disabled', 'disabled');
          else
            this.removeAttribute('disabled');
        </setter>
      </property>

      <method name="getControlElement">
        <body>
          return this.ownerDocument.
            getAnonymousElementByAttribute(this, "anonid", "control");
        </body>
      </method>
    </implementation>

    <handlers>
      <handler event="command">
        this.updateInstanceData(true);
      </handler>

      <handler event="blur" phase="capturing">
        this.updateInstanceData(false);
      </handler>
    </handlers>
  </binding>


  <!-- ITEM of SELECT APPEARANCE FULL -->
  <binding id="select-full-item"
           extends="#select-full-item-base">
    <content>
      <xul:checkbox anonid="control"/>
      <children/>
    </content>

    <implementation>
      <property name="selected"
                onget="return this.control.checked;"
                onset="this.control.checked = val;"/>
    </implementation>

    <handlers>
      <handler event="click">
        if (this.disabled)
          return;

        if (event.originalTarget != this.control) {
          // Select/unselect checkbox that is representation of xforms item
          // element if user clicks xforms label element.
          this.selected = !this.selected;
          this.updateInstanceData(true);
        }
      </handler>
    </handlers>
  </binding>


  <!-- XUL RADIO used as representation for ITEM of SELECT1 APPEARANCE FULL.
    Since original XUL radio element searches radiogroup element in explicit
    content and isn't work propertly if it failed to find radiogroup then
    this binding redefines 'radioGroup' proeprty to return radiogroup for
    radio element.
  -->
  <binding id="select1-full-item-radio"
           extends="chrome://global/skin/globalBindings.xml#radio">

    <implementation>
      <property name="radioGroup" readonly="true">
        <getter>
          if (!this._radioGroup) {
            var item = this.ownerDocument.getBindingParent(this);
            return item.selectControl.control;
          }
          return this._radioGroup;
        </getter>
      </property>
      <field name="_radioGroup">null</field>
    </implementation>
  </binding>

  <!-- ITEM of SELECT1 APPEARANCE FULL -->
  <binding id="select1-full-item"
           extends="#select-full-item-base">
    <content>
      <xul:hbox>
        <xul:radio anonid="control"/>
        <children/>
      </xul:hbox>
    </content>

    <implementation>
      <property name="selected">
        <getter>
          return this.control.selected;
        </getter>
        <setter>
          if (this.control.selected != val) {
            var item = val ? this.control : null;
            this.selectControl.control.selectedItem = item;
          }
        </setter>
      </property>
    </implementation>

    <handlers>
      <handler event="click">
      <![CDATA[
        if (this.disabled)
          return;

        if (event.originalTarget != this.control) {
          // Select radio element that is representation of item element if
          // user clicks xforms label element.
          if (!this.selected)
            this.selected = true;

          this.focus();
          this.updateInstanceData(true);
        }
      ]]>
      </handler>
    </handlers>
  </binding>

</bindings>

