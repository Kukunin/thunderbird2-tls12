<?xml version="1.0" encoding="utf-8"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Mozilla XForms support.
   -
   - The Initial Developer of the Original Code is
   - Alexander Surkov.
   - Portions created by the Initial Developer are Copyright (C) 2006
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -  Alexander Surkov <surkov.alexander@gmail.com> (original author)
   -  Merle Sterling <msterlin@us.ibm.com>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:mozType="http://www.mozilla.org/projects/xforms/2005/type">

  <!-- The file contains implementations of xforms range element for xhtml
    context. All xforms range bindings should be extended from
    'xformswidget-range-base' binding declared in 'range.xml' file.
  -->

  <!-- RANGE: <NUMBER> -->
  <binding id="xformswidget-range-numeric"
           extends="chrome://xforms/content/range.xml#xformswidget-range-numeric-base">

    <content mozType:deferredrefresh="true">
      <children includes="label"/>
      <html:span mozType:slider="true" anonid="slider"
                 xbl:inherits="min=start,max=end,step=step,mozType:tabindex=tabindex"/>
      <children/>
    </content>

    <implementation>
      <method name="getControlElement">
        <body>
          return {
            __proto__: this.ownerDocument.
              getAnonymousElementByAttribute(this, "anonid", "slider"),

            set readonly() {
              // XXX: bug 343523
            },
            get start() {
              return this.min;
            },
            set start(aValue) {
              this.min = aValue;
            },
            get end() {
              return this.max;
            },
            set end(aValue) {
              this.max = aValue;
            }
          };
        </body>
      </method>

      <constructor>
        // Call widgetAttached() after timeout to let slider widget to be
        // loaded.
        this.ownerDocument.defaultView.setTimeout(
          function(aDelegate)
          {
            aDelegate.widgetAttached();
          }, 0, this.delegate);

        // The change event is generated by the slider widget defined in
        // "widgets-xhtml.xml".
        var changeHandler = {
          range: this,
          handleEvent: function(aEvent) {
            this.range.updateInstanceData(true);
          }
        };
        this.control.addEventListener("ValueChange", changeHandler, false);
      </constructor>
    </implementation>

    <handlers>
      <handler event="blur" phase="capturing">
        this.updateInstanceData(false);
      </handler>
    </handlers>
  </binding>

</bindings>
