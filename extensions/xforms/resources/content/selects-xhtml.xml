<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Mozilla XForms support.
   -
   - The Initial Developer of the Original Code is
   - Mozilla Foundation.
   - Portions created by the Initial Developer are Copyright (C) 2006
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -  Alexander Surkov <surkov.alexander@gmail.com> (original author)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings id="xformsSelectsXHTMLBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <!-- SELECT: APPEARANCE FULL -->
  <binding id="select-full"
           extends="chrome://xforms/content/selects.xml#select-base">
    <content>
      <children includes="label"/>
      <html:div class="xf-value">
        <children/>
      </html:div>
    </content>
  </binding>

  <!-- SELECT1: APPEARANCE FULL -->
  <binding id="select1-full"
           extends="chrome://xforms/content/selects.xml#select1-base">
    <content>
      <children includes="label"/>
      <html:div class="xf-value">
        <children/>
      </html:div>
    </content>

    <handlers>
      <handler event="keypress" keycode="VK_UP" preventdefault="true">
        var item = this.selectedItem;
        if (item) {
          function selectPrevItem(aItem, aSelect) {
            aSelect.selectedItem = aItem;
            return false;
          }
          this.cycleTraverseItems(item, true, selectPrevItem, this);
        }
      </handler>

      <handler event="keypress" keycode="VK_DOWN" preventdefault="true">
        var item = this.selectedItem;
        if (item) {
          function selectNextItem(aItem, aSelect) {
            aSelect.selectedItem = aItem;
            return false;
          }
          this.cycleTraverseItems(item, false, selectNextItem, this);
        }
      </handler>
    </handlers>
  </binding>


  <!-- ITEM of SELECT APPEARANCE FULL -->
  <binding id="select-full-item-base"
           extends="chrome://xforms/content/selects.xml#select-item-base">

    <implementation>
      <property name="selected"
                onget="return this.control.checked;"
                onset="this.control.checked = val;"/>

      <property name="disabled">
        <getter>
          return this.control.disabled;
        </getter>
        <setter>
          this.control.disabled = val;
          if (val)
            this.setAttribute('disabled', 'disabled');
          else
            this.removeAttribute('disabled');
        </setter>
      </property>

      <method name="getControlElement">
        <body>
          return this.ownerDocument.
            getAnonymousElementByAttribute(this, "anonid", "control");
        </body>
      </method>
    </implementation>

    <handlers>
      <handler event="blur" phase="capturing">
        this.updateInstanceData(false);
      </handler>
    </handlers>
  </binding>


  <!-- ITEM of SELECT APPEARANCE FULL -->
  <binding id="select-full-item"
           extends="#select-full-item-base">
    <content>
      <html:input type="checkbox" anonid="control"/>
      <children/>
    </content>

    <handlers>
      <handler event="click">
        if (this.disabled)
          return;

        if (event.originalTarget != this.control) {
          // Select/unselect checkbox that is representation of xforms item
          // element if user clicks xforms label element.
          this.selected = !this.selected;
          this.focus();
        }

        this.updateInstanceData(true);
      </handler>
    </handlers>
  </binding>


  <!-- ITEM of SELECT1 APPEARANCE FULL -->
  <binding id="select1-full-item"
           extends="#select-full-item-base">
    <content>
      <html:input type="radio" anonid="control"/>
      <children/>
    </content>

    <handlers>
      <handler event="click">
      <![CDATA[
        if (this.disabled)
          return;

        if (event.originalTarget != this.control) {
          if (!this.selected) {
            // Select radio that is representation of xforms item element if
            // user clicks xforms label element.
            this.selected = true;
          }
          this.focus();
        }

        this.updateInstanceData(true);
      ]]>
      </handler>
    </handlers>
  </binding>

</bindings>

